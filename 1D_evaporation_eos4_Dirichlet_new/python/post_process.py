
from t2listing import *
import numpy as np
import matplotlib.pyplot as plt
import csv
import os
from t2data import *
from mpl_toolkits.mplot3d import Axes3D

if not os.path.exists('figure'):
        os.makedirs('figure')

i=0
while i<lst.num_times:

    fig=plt.figure(figsize=(13,15))
    fig.subplots_adjust(hspace=.30,wspace=.2)
    fig.subplots_adjust(left=0.07, right=0.93, top=0.93, bottom=0.05)
	
    ax11=plt.subplot(241)
    ax11.plot(temperature_degree[:,i],element_value,'k1-')
    plt.ylabel('x (m)')
    plt.xlabel('Temperature (Degree)')
    # plt.ylabel('high (m)')
    plt.ylim(1.1,-0.1)
    plt.xlim(12.90,13.1)
    plt.xticks(np.arange(12.9, 13.11, 0.1))
    #ax11.set_yscale('log')   
    # ax13=ax11.twiny()	
    # ax13.plot(temperature_degree[:,i],element_value,'r1-')
    # plt.xlabel('Temperature (Degree)')
    # # plt.ylabel('high (m)')
    # plt.ylim(1.1,-0.1)
    # plt.xlim(12.95,13.05)
    # #plt.xlim(np.min(temperature_degree),np.max(temperature_degree))
    # #ax13.set_yscale('log')
    # #plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0)) 
    # ax13.spines['top'].set_color('red')
    # ax13.xaxis.label.set_color('red')
    # ax13.tick_params(axis='x', colors='red')

    ax1=plt.subplot(242)
    ax1.plot(gas_relative_permeability[:,i], element_value,'k1-')
    plt.xlabel('Gas Kr')
    #ax1.spines['top'].set_color('red')
    plt.ylim(1.1,-0.1)
    plt.xlim(np.min(gas_relative_permeability),np.max(gas_relative_permeability))
    plt.xlim(-0.1,1.1)
    #plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
    #ax1.set_yscale('log')
    ax2=ax1.twiny()
    ax2.plot(liq_relative_permeability[:,i],element_value,'r1-')
    plt.xlabel('Liquid Kr')
    # plt.ylabel('high (m)')
    plt.ylim(1.1,-0.1)
    plt.xlim(np.min(liq_relative_permeability),np.max(liq_relative_permeability))
    plt.xlim(-0.1,1.1)
    #ax2.set_yscale('log')
    #plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
    ax2.spines['top'].set_color('red')
    ax2.xaxis.label.set_color('red')
    ax2.tick_params(axis='x', colors='red')	 

    ax3=plt.subplot(243)
    ax3.plot(capillary_pressure_pa[:,i]*kpaPpa,element_value,'k1-')
    plt.xlabel('Capillary Pressure (Kpa)')
    # plt.ylabel('high (m)')
    plt.ylim(1.1,-0.1)
    plt.xlim(-100,10)
    #plt.xlim(np.min(capillary_pressure_pa*kpaPpa),np.max(capillary_pressure_pa*kpaPpa))
    #ax3.set_yscale('log')
    #plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))	
    ax4=ax3.twiny()	
    ax4.plot(liq_saturation[:,i]*100,element_value,'r1-')
    plt.xlabel('Liquid Sat. (%)')
    # plt.ylabel('high (m)')
    plt.ylim(1.1,-0.1)
    #plt.xlim(-5.e-2,1.1)
    plt.xlim(np.nanmin(liq_saturation*100),np.nanmax(liq_saturation*100))	
    #plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
    ax4.spines['top'].set_color('red')	
    ax4.xaxis.label.set_color('red')
    ax4.tick_params(axis='x', colors='red')	 	
    #plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))    

    ax3=plt.subplot(244)
    ax3.plot(liquid_flow_mmPday[:,i],connection_value,'k1-')
    plt.xlabel('Liquid Velocity (mm/day)')
    # plt.ylabel('high (m)')
    plt.ylim(1.1,-0.1)
    plt.xlim(np.min(liquid_flow_mmPday),np.max(liquid_flow_mmPday))
    plt.xlim(-0.1,0.3)
    plt.xticks(np.arange(-0.1, 0.31, 0.1))
    #ax3.set_yscale('log')
    #plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))	
    ax4=ax3.twiny()	
    ax4.plot(vapor_diff_flow_mmPday[:,i],connection_value,'r1-')
    plt.xlabel('Vapor Diffusion (mm/day)')
    # plt.ylabel('high (m)')
    plt.ylim(1.1,-0.1)
    plt.xlim(np.nanmin(vapor_diff_flow_mmPday),np.nanmax(vapor_diff_flow_mmPday))	
    plt.xlim(-0.1,0.3)
    plt.xticks(np.arange(-0.1, 0.31, 0.1))
    #plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
    ax4.spines['top'].set_color('red')	
    ax4.xaxis.label.set_color('red')
    ax4.tick_params(axis='x', colors='red')	 	
    #plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))    


    ax7=plt.subplot(413)
    ax7.plot(lst.times[:i+1]*dayPs,vapor_diff_flow_top_mmPday[:i+1],'k1-')
    plt.ylabel('Vapor Diffusion\n1st (mm/day)')
    #plt.xlabel('Time (day)')
    #plt.ylim(0.08,0.13)
    plt.ylim(np.min(vapor_diff_flow_top_mmPday),np.max(vapor_diff_flow_top_mmPday))
    plt.xlim(0,np.max(lst.times)*dayPs)
    plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))
    #ax7.set_xscale('log')
    ax8 = ax7.twinx() 
    ax8.plot(lst.times[:i+1]*dayPs,vapor_adv_flow_top_mmPday[:i+1],'r1-',)
    #plt.ylim(-1.3e-1,-6e-2)
    plt.ylim(np.min(vapor_adv_flow_top_mmPday),np.max(vapor_adv_flow_top_mmPday))
    plt.xlim(0,np.max(lst.times)*dayPs)
    plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))
    plt.ylabel('Vapor Advection\n1st (mm/day)')
    #plt.xlabel('Time (day)')
    #ax8.set_xscale('log')
    ax8.spines['right'].set_color('red')
    ax8.yaxis.label.set_color('red')
    ax8.tick_params(axis='y', colors='red')
	
    ax7=plt.subplot(414)
    ax7.plot(lst.times[:i+1]*dayPs,vapor_diff_flow_top_mmPday[:i+1],'k1-')
    plt.ylabel('Vapor Diffusion\n1st (mm/day)')
    #plt.xlabel('Time (day)')
    #plt.ylim(-0.1e-3,0.11e-2)
    plt.ylim(np.min(vapor_diff_flow_top_mmPday),np.max(vapor_diff_flow_top_mmPday))
    plt.xlim(0,np.max(lst.times)*dayPs)
    plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))
    #ax7.set_xscale('log')
    ax8 = ax7.twinx() 
    ax8.plot(lst.times[:i+1]*dayPs,liquid_flow_top_mmPday[:i+1],'r1-',)
    #plt.ylim(-1.e1,1.1e2)
    plt.ylim(np.min(liquid_flow_top_mmPday),np.max(liquid_flow_top_mmPday))
    plt.xlim(0,np.max(lst.times)*dayPs)
    plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))
    plt.ylabel('Liquid Velocity\n1st (mm/day)')
    #plt.xlabel('Time (day)')
    #ax8.set_xscale('log')
    ax8.spines['right'].set_color('red')
    ax8.yaxis.label.set_color('red')
    ax8.tick_params(axis='y', colors='red')		
  
	
    fig.suptitle('time: %6.2e s' %lst.times[i])
    plt.rcParams.update({'font.size':12})
    #fig.tight_layout()
    plt.savefig('figure/output_'+str(i+101)+'.png',dpi=300) 
    i+=1

#plt.close('all')
#ffmpeg -r 3/1 -start_number 101 -i output_%03d.png -c:v libx264 -r 30 -pix_fmt yuv420p output_Kr_harmonic_weighted.mp4